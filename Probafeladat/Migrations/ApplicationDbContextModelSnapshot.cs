// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Probafeladat.Data;

namespace Probafeladat.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Probafeladat.Models.Package", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("ShippingStateID");

                    b.HasKey("ID");

                    b.HasIndex("ShippingStateID");

                    b.ToTable("Packages");

                    b.HasData(
                        new { ID = 1, Identifier = "BMQX3552", ShippingStateID = 3 },
                        new { ID = 2, Identifier = "ZYJP4301", ShippingStateID = 4 },
                        new { ID = 3, Identifier = "ILON3559", ShippingStateID = 5 },
                        new { ID = 4, Identifier = "PJXJ7450", ShippingStateID = 3 },
                        new { ID = 5, Identifier = "HQKE2973", ShippingStateID = 5 },
                        new { ID = 6, Identifier = "WSNH4664", ShippingStateID = 2 },
                        new { ID = 7, Identifier = "XAQH8754", ShippingStateID = 2 },
                        new { ID = 8, Identifier = "NVNU1033", ShippingStateID = 2 },
                        new { ID = 9, Identifier = "VVMN5186", ShippingStateID = 2 },
                        new { ID = 10, Identifier = "PSTA6722", ShippingStateID = 4 },
                        new { ID = 11, Identifier = "DVSK7838", ShippingStateID = 4 },
                        new { ID = 12, Identifier = "CBAG6330", ShippingStateID = 2 },
                        new { ID = 13, Identifier = "EHNP8661", ShippingStateID = 5 },
                        new { ID = 14, Identifier = "BMQC3933", ShippingStateID = 2 },
                        new { ID = 15, Identifier = "MIGH7483", ShippingStateID = 4 },
                        new { ID = 16, Identifier = "OWKZ2576", ShippingStateID = 1 },
                        new { ID = 17, Identifier = "PCBW7104", ShippingStateID = 5 },
                        new { ID = 18, Identifier = "HPGF3997", ShippingStateID = 1 },
                        new { ID = 19, Identifier = "SZWW9784", ShippingStateID = 1 },
                        new { ID = 20, Identifier = "AAMI9385", ShippingStateID = 3 },
                        new { ID = 21, Identifier = "KVII7154", ShippingStateID = 4 },
                        new { ID = 22, Identifier = "WFDL1124", ShippingStateID = 4 },
                        new { ID = 23, Identifier = "VEVR8454", ShippingStateID = 4 },
                        new { ID = 24, Identifier = "DHZC6098", ShippingStateID = 4 },
                        new { ID = 25, Identifier = "VSXG9837", ShippingStateID = 1 },
                        new { ID = 26, Identifier = "OGEQ5290", ShippingStateID = 5 },
                        new { ID = 27, Identifier = "QYXN4120", ShippingStateID = 1 },
                        new { ID = 28, Identifier = "BGYC1146", ShippingStateID = 4 },
                        new { ID = 29, Identifier = "IIFT2806", ShippingStateID = 4 },
                        new { ID = 30, Identifier = "LIGO5374", ShippingStateID = 5 },
                        new { ID = 31, Identifier = "VQFZ9000", ShippingStateID = 4 },
                        new { ID = 32, Identifier = "PFSY1303", ShippingStateID = 5 },
                        new { ID = 33, Identifier = "UPYW1386", ShippingStateID = 2 },
                        new { ID = 34, Identifier = "UTRC9260", ShippingStateID = 4 },
                        new { ID = 35, Identifier = "YUBM2519", ShippingStateID = 1 },
                        new { ID = 36, Identifier = "PBLY7456", ShippingStateID = 4 },
                        new { ID = 37, Identifier = "XBJF5397", ShippingStateID = 4 },
                        new { ID = 38, Identifier = "CJHI9707", ShippingStateID = 3 },
                        new { ID = 39, Identifier = "TPHY8046", ShippingStateID = 4 },
                        new { ID = 40, Identifier = "ISSO1171", ShippingStateID = 1 },
                        new { ID = 41, Identifier = "SCBO4229", ShippingStateID = 5 },
                        new { ID = 42, Identifier = "LWXF9590", ShippingStateID = 5 },
                        new { ID = 43, Identifier = "YPGW1026", ShippingStateID = 3 },
                        new { ID = 44, Identifier = "JQVL7840", ShippingStateID = 3 },
                        new { ID = 45, Identifier = "WRHS6589", ShippingStateID = 1 },
                        new { ID = 46, Identifier = "AIBH5380", ShippingStateID = 2 },
                        new { ID = 47, Identifier = "TOAI8869", ShippingStateID = 1 },
                        new { ID = 48, Identifier = "SOQH1004", ShippingStateID = 1 },
                        new { ID = 49, Identifier = "MLSD2944", ShippingStateID = 2 }
                    );
                });

            modelBuilder.Entity("Probafeladat.Models.ShippingState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("Sequence");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("ID");

                    b.ToTable("ShippingStates");

                    b.HasData(
                        new { ID = 1, Description = "Csomag a feladónál. Futárra vár.", Sequence = 1, Short = "WfpU", State = "Waiting for Pick Up" },
                        new { ID = 2, Description = "Csomag a futárnál. Depóba tart.", Sequence = 2, Short = "PU", State = "Picked Up" },
                        new { ID = 3, Description = "Depóban van. Kiszállításra vár", Sequence = 3, Short = "ID", State = "In Depot" },
                        new { ID = 4, Description = "Kiszállítás alatt áll. Célba tart.", Sequence = 4, Short = "OD", State = "On Delivery" },
                        new { ID = 5, Description = "Kiszállítva", Sequence = 5, Short = "DD", State = "Delivered" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Probafeladat.Models.Package", b =>
                {
                    b.HasOne("Probafeladat.Models.ShippingState", "ShippingState")
                        .WithMany()
                        .HasForeignKey("ShippingStateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
